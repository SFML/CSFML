name: CI

on: [push, pull_request, workflow_dispatch]

concurrency:
  group: environment-${{github.ref}}
  cancel-in-progress: true

env:
  SFML_VERSION: 3.0.0

defaults:
  run:
    shell: bash

jobs:
  build:
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }} ${{ matrix.type.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows VS2022 x86,  os: windows-2022, flags: -AWin32 }
        - { name: Windows VS2022 x64,  os: windows-2022, flags: -Ax64 }
        - { name: Windows ClangCL,     os: windows-2022, flags: -T ClangCL }
        - { name: Windows Clang,       os: windows-2022, flags: -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
        - { name: Linux GCC,           os: ubuntu-22.04, flags: -GNinja }
        - { name: Linux Clang,         os: ubuntu-22.04, flags: -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
        - { name: MacOS,               os: macos-14,     flags: -GNinja }
        config:
        - { name: Shared, flags: -DBUILD_SHARED_LIBS=ON,  csfml_flags: -DCSFML_LINK_SFML_STATICALLY=OFF }
        - { name: Static, flags: -DBUILD_SHARED_LIBS=OFF, csfml_flags: -DCSFML_LINK_SFML_STATICALLY=ON }
        type:
        - { name: Debug }
        - { name: Release }

    steps:
    - name: Get CMake and Ninja
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: ${{ runner.os == 'Windows' && '3.25' || '3.22' }}
        ninjaVersion: latest

    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install libxrandr-dev libxcursor-dev libxi-dev libudev-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libfreetype-dev

    - name: Checkout SFML
      uses: actions/checkout@v4
      with:
        repository: SFML/SFML
        ref: ${{env.SFML_VERSION}}
        path: SFML

    - name: Configure SFML CMake
      run: |
        cmake -S SFML -B SFML/build \
          -DCMAKE_BUILD_TYPE=${{matrix.type.name}} \
          -DCMAKE_INSTALL_PREFIX=SFML/install \
          ${{matrix.platform.flags}} \
          ${{matrix.config.flags}}

    - name: Build SFML
      run: cmake --build SFML/build --config ${{matrix.type.name}} --target install

    - name: Checkout CSFML
      uses: actions/checkout@v4
      with:
        path: CSFML

    - name: Configure CSFML CMake
      run: |
        cmake --preset dev -S CSFML -B CSFML/build \
          -DCMAKE_BUILD_TYPE=${{matrix.type.name}} \
          -DCMAKE_INSTALL_PREFIX=CSFML/install \
          -DSFML_ROOT=SFML/install \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          ${{matrix.platform.flags}} \
          ${{matrix.config.flags}} \
          ${{matrix.config.csfml_flags}}

    - name: Build CSFML
      run: cmake --build CSFML/build --config ${{matrix.type.name}} --target install

    - name: Test
      run: ctest --test-dir CSFML/build -C ${{matrix.type.name}} --output-on-failure

  format:
    name: Formatting
    runs-on: ubuntu-24.04

    steps:
    - name: Install Clang Format
      run: sudo apt-get install clang-format-17

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Format Code
      run: cmake -DCLANG_FORMAT_EXECUTABLE=clang-format-17 -P cmake/Format.cmake

    - name: Check Formatting
      run: git diff --exit-code

  tidy:
    name: Analyze
    runs-on: macos-14

    steps:
    - name: Install Dependencies
      run: |
        brew update
        brew install llvm ninja
        echo /opt/homebrew/opt/llvm/bin >> $GITHUB_PATH

    - name: Checkout SFML
      uses: actions/checkout@v4
      with:
        repository: SFML/SFML
        ref: ${{env.SFML_VERSION}}
        path: SFML

    - name: Configure SFML CMake
      run: cmake -S SFML -B SFML/build -GNinja -DCMAKE_INSTALL_PREFIX=SFML/install -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug

    - name: Build SFML
      run: cmake --build SFML/build --target install

    - name: Checkout CSFML
      uses: actions/checkout@v4
      with:
        path: CSFML

    - name: Configure CSFML CMake
      run: cmake --preset dev -S CSFML -B CSFML/build -DSFML_ROOT=SFML/install -DCMAKE_BUILD_TYPE=Debug

    - name: Tidy
      run: cmake --build CSFML/build --target tidy

  docs:
    name: Documentation
    runs-on: macos-14

    steps:
    - name: Install Doxygen
      run: |
        brew update
        brew install doxygen ninja || true

    - name: Checkout SFML
      uses: actions/checkout@v4
      with:
        repository: SFML/SFML
        ref: ${{env.SFML_VERSION}}
        path: SFML

    - name: Configure SFML
      run: cmake -S SFML -B SFML/build -GNinja -DCMAKE_INSTALL_PREFIX=SFML/install

    - name: Build SFML
      run: cmake --build SFML/build --target install

    - name: Checkout CSFML
      uses: actions/checkout@v4
      with:
        path: CSFML

    - name: Configure CSFML
      run: cmake -S CSFML -B CSFML/build -GNinja -DSFML_ROOT=SFML/install -DCSFML_BUILD_DOC=ON -DCSFML_LINK_SFML_STATICALLY=ON

    - name: Build Doxygen Site
      run: cmake --build CSFML/build --target doc
